#ifndef _PONYLIB
#define _PONYLIB

#include <string>
#include <Windows.h>

#define NT_SUCCESS(Status)  (((NTSTATUS)(Status)) >= 0)

namespace ponylib {
    template<typename FuncTy>
    class system_function_t {
        protected:
            std::string m_libraryName;
            std::string m_functionName;

            HMODULE m_hModule;
            FuncTy  m_pProc;

            bool m_bInit = false;

            system_function_t() {};
            system_function_t& operator = (system_function_t&)
            {
                return *this;
            };
        public:
            system_function_t(std::string libraryName, std::string functionName): 
                m_libraryName(libraryName),
                m_functionName(functionName),
                m_hModule(0),
                m_pProc(0) 
            {
                m_hModule = LoadLibraryA(m_libraryName.c_str());
                if (m_hModule == NULL) {
                    return;
                }
                m_pProc = (FuncTy)GetProcAddress(m_hModule, m_functionName.c_str());
                if (m_pProc == NULL) {
                    return;
                }

                m_bInit = true;
            }
            ~system_function_t() {
                FreeLibrary((HMODULE)m_hModule);
                m_pProc = NULL;
            }
            bool init() const {
                return m_bInit;
            }
            FuncTy operator*() const {
                return m_pProc;
            }  
    };
};

#endif // _PONYLIB