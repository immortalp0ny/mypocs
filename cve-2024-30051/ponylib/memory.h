#ifndef _PONYLIB_MEMORY
#define _PONYLIB_MEMORY

#include <Windows.h>

#define _untyped_ptr_move_nbytes(ptr, off) (PVOID)( (PUINT8)( ptr ) + off )

namespace ponylib::memory {

    class memory_stream_t {
        protected:
            UINT32 m_pos;
            SIZE_T m_size;
            PVOID  m_base;

            int m_errorCode = 0;
        public:
            memory_stream_t(): m_errorCode(STATUS_NO_MEMORY) {};
            memory_stream_t(PVOID base, SIZE_T size, UINT32 startOffset = 0): m_base(base), m_size(size), m_pos(startOffset) {};
            virtual ~memory_stream_t() = default;

            UINT32 pos() const {
                return m_pos;
            };
            SIZE_T size() const {
                return m_size;
            };
            PVOID base() const {
                return m_base;
            };

            bool writeData(PVOID data, SIZE_T dataSize) {
                if (m_errorCode != 0) {
                    return false;
                }

                if ( (m_pos + dataSize) > m_size || (m_pos + dataSize) < m_pos) {
                        m_errorCode = STATUS_NO_MEMORY;
                        return false;
                    }

                memcpy( 
                    _untyped_ptr_move_nbytes(m_base, m_pos), 
                    data, 
                    dataSize
                );

                m_pos += (UINT32)dataSize;
                m_errorCode  = 0;

                return true;
            };

            template<typename Ty>
            bool write(Ty&& obj) {
                return writeData(&obj, sizeof(Ty));
            };

            void erase(UINT32 startOffset = 0) {
                memset(m_base, 0, m_pos);
                m_pos = startOffset;
            }
    };

}

#endif // _PONYLIB_MEMORY