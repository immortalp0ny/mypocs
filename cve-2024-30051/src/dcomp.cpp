#include "dcomp.h"


dcomp_channel_t::dcomp_channel_t(SIZE_T size): m_size(size), m_error(0), m_ctr(1) {
    auto ntstatus = (*ponylib::win32u::kNtDCompositionCreateChannel)(&m_hch, &m_size, &m_mapped);
    if (!NT_SUCCESS(ntstatus)) {
        m_error = ntstatus;
        return;
    }
    m_stream = ponylib::memory::memory_stream_t(m_mapped, m_size);
}
dcomp_channel_t::~dcomp_channel_t() {
    (*ponylib::win32u::kNtDCompositionDestroyChannel)(m_hch);
}
bool dcomp_channel_t::createResource(UINT32 dwTypeId, UINT32 dwIndex, UINT32 dwShared) {
    dcomp_command_create_resource_t cmd = {0, 0, 0, 0};

    cmd.Id = (UINT32)dcomp_command_id_t::CreateResource;
    cmd.Index = dwIndex;
    cmd.TypeId = dwTypeId;
    cmd.Shared = dwShared;

    return m_stream.write(std::move(cmd));
};
bool dcomp_channel_t::openSharedResource(UINT32 dwIndex, UINT64 dwHandle, UINT32 dwTypeId, UINT32 dwReserved1) {
    dcomp_command_open_shared_resource_t cmd = {0, 0, 0, 0, 0};

    cmd.Id = (UINT32)dcomp_command_id_t::OpenSharedResource;
    cmd.Index = dwIndex;
    cmd.TypeId = dwTypeId;
    cmd.Handle = dwHandle;
    cmd.Reserved1 = dwReserved1;

    return m_stream.write(std::move(cmd));
};
bool dcomp_channel_t::setIntegerProperty(UINT32 dwIndex, UINT64 dqPropertyId, UINT64 dqPropertyValue) {
    dcomp_command_set_resource_integer_property_t cmd = {0 ,0, 0, 0};

    cmd.Id = (UINT32)dcomp_command_id_t::SetResourceIntegerProperty;
    cmd.Index = dwIndex;
    cmd.PropertyId = dqPropertyId;
    cmd.PropertyValue = dqPropertyValue;

    return m_stream.write(std::move(cmd));
};
bool dcomp_channel_t::setFloatProperty(UINT32 dwIndex, UINT32 dwPropertyId, FLOAT dqPropertyValue) {
    dcomp_command_set_resource_float_property_t cmd = {0 ,0, 0, 0};

    cmd.Id = (UINT32)dcomp_command_id_t::SetResourceFloatProperty;
    cmd.Index = dwIndex;
    cmd.PropertyId = dwPropertyId;
    cmd.PropertyValue = dqPropertyValue;

    return m_stream.write(std::move(cmd));
};
bool dcomp_channel_t::setReferenceProperty(UINT32 dwIndex, UINT32 dwPropertyId, UINT32 dwPropertyValue) {
    dcomp_command_set_resource_reference_property_t cmd = {0 ,0, 0, 0};
    cmd.Id = (UINT32)dcomp_command_id_t::SetResourceReferenceProperty;
    cmd.Index = dwIndex;
    cmd.PropertyId = dwPropertyId;
    cmd.PropertyValue = dwPropertyValue;

    return m_stream.write(std::move(cmd));
};
bool dcomp_channel_t::setBufferProperty(UINT32 dwIndex, UINT32 dqPropertyId, PVOID buffer, SIZE_T size) {
    auto  dyn_cmd_size = sizeof(dcomp_command_set_resource_buffer_property_t) - 1 + size;
    auto  dyn_mem      = new UINT8[dyn_cmd_size];
    auto* dyn_cmd      = (dcomp_command_set_resource_buffer_property_t*)(dyn_mem);

    dyn_cmd->Id = (UINT32)dcomp_command_id_t::SetResourceBufferProperty;
    dyn_cmd->Index = dwIndex;
    dyn_cmd->PropertyId = dqPropertyId;
    dyn_cmd->ArraySize = (UINT32)(size);

    memcpy(&dyn_cmd->Array, buffer, size);

    auto r = m_stream.writeData(
        dyn_cmd, dyn_cmd_size
    );

    dyn_cmd = nullptr;

    delete[] dyn_mem;

    return r;
};
bool dcomp_channel_t::setReferenceArrayProperty(UINT32 dwIndex, UINT32 dqPropertyId, UINT32 dwIndice[], SIZE_T szIndices) {
    auto  dyn_cmd_size = sizeof(dcomp_command_set_resource_reference_array_property_t) - sizeof(UINT32) + szIndices * sizeof(UINT32);
    auto  dyn_mem      = new UINT8[dyn_cmd_size];
    auto* dyn_cmd      = (dcomp_command_set_resource_reference_array_property_t*)(dyn_mem);

    dyn_cmd->Id = (UINT32)dcomp_command_id_t::SetResourceReferenceArrayProperty;
    dyn_cmd->Index = dwIndex;
    dyn_cmd->PropertyId = dqPropertyId;
    dyn_cmd->ArraySize = (UINT32)(szIndices);

    memcpy(&dyn_cmd->Array, dwIndice, szIndices * sizeof(UINT32));

    auto r = m_stream.writeData(
        dyn_cmd, dyn_cmd_size
    );
    dyn_cmd = nullptr;

    delete[] dyn_mem;

    return r;
};
bool dcomp_channel_t::addVisualChild(UINT32 dwIndex, UINT32 dwIndexChild, UINT32 dwMode, UINT32 dwAdditionalIndex) {
    dcomp_command_add_visual_child_t cmd = {0 ,0, 0, 0, 0};
    constexpr auto                   cmd_size = sizeof(dcomp_command_add_visual_child_t);

    cmd.Id = (UINT32)dcomp_command_id_t::AddVisualChild;
    cmd.Index = dwIndex;
    cmd.IndexChild = dwIndexChild;
    cmd.Mode = dwMode;
    cmd.AdditionalIndex = dwAdditionalIndex;

    return m_stream.write(std::move(cmd));
};

bool dcomp_channel_t::releaseResource(UINT32 dwIndex) {
    dcomp_command_release_resource_t cmd = {0, 0};
    constexpr auto                   cmd_size = sizeof(dcomp_command_release_resource_t);

    cmd.Id = (UINT32)dcomp_command_id_t::ReleaseResource;
    cmd.Index = dwIndex;

    return m_stream.write(std::move(cmd));
};
bool dcomp_channel_t::commit() {
    DWORD out1;
    BOOL  out2;
    BOOL  in1 = FALSE;

    auto ntstatus = (*ponylib::win32u::kNtDCompositionCommitChannel)(
        m_hch, &out1, &out2, in1, NULL, NULL, NULL, NULL
    );
    if (!NT_SUCCESS(ntstatus)) {
        m_error = ntstatus;
        return false;
    }
    return true;
};
bool dcomp_channel_t::process() {
    DWORD dwArg1, dwArg2 = NULL;

    auto status = (*ponylib::win32u::kNtDCompositionProcessChannelBatchBuffer)(
        m_hch,
        m_stream.pos(),
        &dwArg1, 
        &dwArg2
    );

    if (!NT_SUCCESS(status)) {
        m_error = status;
        return false;
    }

    m_stream.erase();

    return true;
};
bool dcomp_channel_t::apply() {
    auto r = process();
    if (!r)
        return r;
    return commit();
};


dcomp_shared_section_t::dcomp_shared_section_t(dcomp_channel_t* pch, UINT32 dwIndex,  UINT32 dwTypeId, SIZE_T size): 
    m_ch(pch), 
    m_index(dwIndex),
    m_typeId(dwTypeId),
    m_size(size) ,
    m_error(0),
    m_pMapped(0) {
    if ( !m_ch->createResource(m_typeId, m_index, 0) ) {
        m_error = pch->error();
        return;
    }
    if ( !m_ch->process() ) {
        m_error = pch->error();
        return;
    }
    if ( !m_ch->commit() ) {
        m_error = pch->error();
        return;
    }

    auto ntstatus = (*ponylib::win32u::kNtDCompositionCreateAndBindSharedSection)(pch->hch(), m_index, m_size, &m_hSection);
    if (!NT_SUCCESS(ntstatus)) {
        m_error = ntstatus;
        return;
    } 

    ntstatus = (*ponylib::nt::kNtMapViewOfSection)(
        m_hSection,
        GetCurrentProcess(),
        &m_pMapped,
        NULL,
        NULL,
        NULL,
        &size,
        2, // ViewUnmap 
        NULL,
        PAGE_READWRITE
    );
    if ( !NT_SUCCESS(ntstatus) ) {
        m_error = ntstatus;
        return;
    }
};

dcomp_shared_section_t::~dcomp_shared_section_t() {
    if (m_error != 0) {
        return;
    }

    if (m_pMapped) {
        (*ponylib::nt::kNtUnmapViewOfSection)(GetCurrentProcess(), m_pMapped);
    }

    m_ch->releaseResource(m_index);
}