#ifndef DCOMP_H_
#define DCOMP_H_

#include <Windows.h>

#include "ponylib/win32u.h"
#include "ponylib/memory.h"
#include "ponylib/nt.h"

enum class dcomp_command_id_t: UINT32 {
    ProcessCommandBufferIterator=0,
    CreateResource=1,
    OpenSharedResource=2,
    ReleaseResource=3,
    GetAnimationTime=4,
    CapturePointer=5,
    OpenSharedResourceHandle=6,
    SetResourceCallbackId=7,
    SetResourceIntegerProperty=8,
    SetResourceFloatProperty=9,
    SetResourceHandleProperty=10,
    SetResourceHandleArrayProperty=11,
    SetResourceBufferProperty=12,
    SetResourceReferenceProperty=13,
    SetResourceReferenceArrayProperty=14,
    SetResourceAnimationProperty=15,
    SetResourceDeletedNotificationTag=16,
    AddVisualChild=17,
    RedirectMouseToHwnd=18,
    SetVisualInputSink=19,
    RemoveVisualChild=20
};

#pragma pack(push, 1)
struct dcomp_command_t {
    UINT32 Id;
};
struct dcomp_command_create_resource_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 TypeId;
    UINT32 Shared;
};
struct dcomp_command_open_shared_resource_t {
    UINT32 Id;
    UINT32 Index;
    UINT64 Handle;
    UINT32 TypeId;
    UINT32 Reserved1;
};
struct dcomp_command_release_resource_t {
    UINT32 Id;
    UINT32 Index;
};
struct dcomp_command_get_animation_time_t {
    UINT32 Id;
    UINT32 Index;
    UINT64 Previous;
    UINT64 Delta;
};
struct dcomp_command_capture_pointer_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 Unknown_0_1;
    UINT32 PointerId;
    UINT64 Unknown_Stored_Value;
};
struct dcomp_command_open_shared_resource_handle_t {
    UINT32 Id;
    UINT32 Index;
    UINT64 Unknown;
};
struct dcomp_command_set_resource_callback_id_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 CallbackId;
};
struct dcomp_command_set_resource_integer_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT64 PropertyId;
    UINT64 PropertyValue;
};
struct dcomp_command_set_resource_float_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 PropertyId;
    FLOAT  PropertyValue;
};
struct dcomp_command_set_resource_handle_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT64 PropertyId;
    UINT64 PropertyValue;
};
struct dcomp_command_set_resource_handle_array_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 PropertyId;
    UINT32 ArraySize;
    UINT64 Array[1];
};
struct dcomp_command_set_resource_buffer_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 PropertyId;
    UINT32 ArraySize;
    UINT8  Array[1];
};
struct dcomp_command_set_resource_reference_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 PropertyId;
    UINT32 PropertyValue;
};
struct dcomp_command_set_resource_reference_array_property_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 PropertyId;
    UINT32 ArraySize;
    UINT32 Array[1];
};
struct dcomp_command_add_visual_child_t {
    UINT32 Id;
    UINT32 Index;
    UINT32 IndexChild;
    UINT32 Mode;
    UINT32 AdditionalIndex; 
};
#pragma pack(pop)

class dcomp_channel_t {
    protected:
        HANDLE m_hch = NULL;
        SIZE_T m_size = NULL;
        PVOID  m_mapped = NULL;

        ponylib::memory::memory_stream_t m_stream;

        int m_ctr;
        int m_error;

    public:
        dcomp_channel_t(SIZE_T size);
        ~dcomp_channel_t();

        bool ok() const {
            return NT_SUCCESS(m_error);
        };

        int error() const {
            return m_error;
        }

        HANDLE hch() const {
            return m_hch;
        }

        int nextIndex() {
            return m_ctr++;
        }

        bool createResource( UINT32 dwTypeId, UINT32 dwIndex, UINT32 dwShared);
        bool openSharedResource( UINT32 dwIndex, UINT64 dwHandle, UINT32 dwTypeId, UINT32 dwReserved1);
        bool setIntegerProperty( UINT32 dwIndex, UINT64 dqPropertyId, UINT64 dqPropertyValue);
        bool setFloatProperty( UINT32 dwIndex, UINT32 dwPropertyId, FLOAT dwPropertyValue);
        bool setReferenceProperty( UINT32 dwIndex, UINT32 dwPropertyId, UINT32 dwPropertyValue);
        bool setBufferProperty( UINT32 dwIndex, UINT32 dqPropertyId, PVOID buffer, SIZE_T size);
        bool setReferenceArrayProperty( UINT32 dwIndex, UINT32 dqPropertyId, UINT32 dwIndice[], SIZE_T szIndices);
        bool addVisualChild( UINT32 dwIndex, UINT32 dwIndexChild, UINT32 dwMode, UINT32 dwAdditionalIndex);
        bool releaseResource( UINT32 dwIndex);

        bool commit();
        bool process();
        bool apply();
};

class dcomp_shared_section_t {
    protected:
        HANDLE m_hSection;
        PVOID  m_pMapped;
        SIZE_T m_size;
        UINT32 m_index;
        UINT32 m_typeId;

        dcomp_channel_t* m_ch;

        int m_error = 0;
    public:
        dcomp_shared_section_t( dcomp_channel_t* pch, UINT32 dwIndex,  UINT32 dwTypeId, SIZE_T size );
        ~dcomp_shared_section_t();
        
        bool ok() const {
            return NT_SUCCESS(m_error);
        };

        int error() const {
            return m_error;
        }

        PVOID base() const {
            return m_pMapped;
        };
        SIZE_T size() const {
            return m_size;
        };
        HANDLE handle() const {
            return m_hSection; 
        };
        UINT32 index() const {
            return m_index;
        };
        UINT32 typeId() const {
            return m_typeId;
        }
};

#endif // DCOMP_H_